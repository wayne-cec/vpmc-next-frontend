
import { useState, useEffect, createContext, useContext } from 'react'
import { ICommitee } from '../../../components/MapContainer/AprV2Map'
import { ICommiteeAprDetail } from '../../../store/slice/commitee'
import WithNavProtected from '../../../Layout/front-layout/WithNavProtected'
import { IAprRegionGraphDisplayData } from '../../../api/prod'
import { ICountyData, ITownData } from '../../../api/prod'
import { Grid } from '@mui/material'
import type { NextPage } from 'next'
import style from './index.module.scss'
import Drawer from '../../../components/Drawer'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import CommiteeCard from '../../../components/CommiteeCard'
import Image from 'next/image'
import doubleRight from '../../../public/aprV2/doubleRight.png'
import doubleLeft from '../../../public/aprV2/doubleLeft.png'
import doubleRightHover from '../../../public/aprV2/doubleRight-hover.png'
import doubleLeftHover from '../../../public/aprV2/doubleLeft-hover.png'
import api from '../../../api'
import CountySelector from '../../../components/CountySelector'
import TownSelector from '../../../components/TownSelector'
import classNames from 'classnames'
import TabsPanel from '../../../components/TabsPanel'
import MapPopup from '../../../components/MapPopup'

const MapContainer = dynamic(
  () => import('../../../components/MapContainer/AprV2Map'),
  { ssr: false }
)

export const CountyGraphPendingContext = createContext<{
  pending: boolean,
  setpending: (value: boolean) => void
}>({
  pending: false,
  setpending: (value) => { }
})

export const useCountyGraphPendingStatus = () => {
  return useContext(CountyGraphPendingContext)
}

const AprV2: NextPage = () => {
  const [first, setfirst] = useState<boolean>(false)
  const [drawerBtn, setdrawerBtn] = useState<string>(doubleRight.src)
  const [commiteeInExtent, setcommiteeInExtent] = useState<ICommitee[]>([])
  const [currentCommitee, setcurrentCommitee] = useState<ICommitee | undefined>(undefined)
  const [currentCommiteeAprDetail, setcurrentCommiteeAprDetail] = useState<ICommiteeAprDetail | undefined>(undefined)
  const [townGeojson, settownGeojson] = useState<any | null>(null)
  const [county, setcounty] = useState<string | null>(null)
  const [town, settown] = useState<string | undefined>(undefined)
  const [displayData, setdisplayData] = useState<IAprRegionGraphDisplayData | null>(null)
  const [countyData, setcountyData] = useState<ICountyData | null>(null)
  const [townData, settownData] = useState<ITownData | null>(null)
  const [countyGraphPending, setcountyGraphPending] = useState<boolean>(false)
  const [graphGroupOpen, setgraphGroupOpen] = useState<boolean>(false)


  const handleFetchTownGeography = async () => {
    const { statusCode, responseContent } = await api.prod.getVillageGeographyByTown(
      county!,
      town!
    )
    if (statusCode === 200) {
      settownGeojson(responseContent)
    }
  }

  const handleSearch = async () => {
    setcountyGraphPending(true)
    const { statusCode, responseContent } = await api.prod.getTownInfo(county!, town!)
    if (statusCode === 200) {
      setdisplayData(responseContent)
      await handleFetchTownGeography()
      setgraphGroupOpen(true)
    }
  }

  const reFetchTownData = async (county: string) => {
    const { statusCode, responseContent2 } = await api.prod.listTownsByCounty(county)
    if (statusCode === 200) {
      settown(responseContent2['鄉鎮市區'][0].name)
      settownData(responseContent2)
    }
  }

  useEffect(() => {
    const fetchDefaultCountyData = async () => {
      const { statusCode, responseContent } = await api.prod.listCountiesByRegion()
      if (statusCode === 200) {
        setcountyData(responseContent)
        setcounty(responseContent['北部'][0].name)
        const { statusCode, responseContent2 } = await api.prod.listTownsByCounty(responseContent['北部'][0].name)
        if (statusCode === 200) {
          settownData(responseContent2)
          settown(responseContent2['鄉鎮市區'][0].name)
        }
      }
    }
    fetchDefaultCountyData()
  }, [])

  return (
    <>
      <Head>
        <title>VPMC | 實價登錄資訊平台</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/yuantai.ico" />
      </Head>
      <CountyGraphPendingContext.Provider
        value={{
          pending: countyGraphPending,
          setpending: (value) => { setcountyGraphPending(value) }
        }}
      >
        <div className={style.main}>

          <div className={classNames({
            [style.panel]: true,
            'animate__animated': true,
            'animate__backInLeft': true
          })}>

            <div className={style.filterGroup}>

              <Grid container spacing={1}>
                <Grid item xs={5}>
                  <CountySelector
                    countyData={countyData!}
                    selectedCounty={county}
                    onCountyChange={(county) => {
                      setcounty(county)
                      reFetchTownData(county)
                    }}
                  />
                </Grid>
                <Grid item xs={5}>
                  <TownSelector
                    townData={townData!}
                    selectedTown={town}
                    onTownChange={(town) => {
                      settown(town)
                    }}
                  />
                </Grid>
                <Grid item xs={2}>
                  <div className={classNames({
                    [style.searchBtn]: true,
                    [style.loading]: countyGraphPending
                  })}
                    onClick={() => {
                      handleSearch()
                    }}
                  >
                    {
                      countyGraphPending
                        ? <div className={style.loader}></div>
                        : <Image src={'/aprRegion/search.png'} width='30px' height='30px' alt='' />
                    }
                  </div>
                </Grid>
              </Grid>

            </div>

            <div className={classNames({
              [style.graphGroup]: true,
              [style.hide]: !graphGroupOpen
            })}>
              {
                displayData && <>
                  <TabsPanel
                    displayData={displayData}
                  ></TabsPanel>
                </>
              }
            </div>

            {
              graphGroupOpen && <div className={style.expand}
                onClick={() => {
                  setgraphGroupOpen(false)
                }}
              >⮝</div>
            }

            {
              !graphGroupOpen && displayData !== null && <div className={style.expand}
                onClick={() => {
                  setgraphGroupOpen(true)
                }}
              >⮟</div>
            }

          </div>

          <Drawer
            open={first}
            direction={'row'}
            onClose={() => { setfirst(false) }}
          >
            {
              commiteeInExtent.length !== 0
                ?
                commiteeInExtent.map((commitee, index) => {
                  return <CommiteeCard key={index}
                    {...commitee}
                    onClick={setcurrentCommitee}
                  />
                }) :
                <p>範圍內無社區，請放大地圖</p>
            }

          </Drawer>

          <div className={style.content}>
            <div className={style.mapContainer}>
              <MapContainer
                basemap='gray'
                townGeojson={townGeojson}
                onExtentChange={setcommiteeInExtent}
              />
            </div>
            <div className={style.footer}>
              <Image
                alt=''
                className={style.drawerBtn}
                src={drawerBtn} width='30px' height='30px'
                onMouseMove={() => {
                  if (!first) {
                    setdrawerBtn(doubleRightHover.src)
                  } else {
                    setdrawerBtn(doubleLeftHover.src)
                  }
                }}
                onMouseLeave={() => {
                  if (!first) {
                    setdrawerBtn(doubleRight.src)
                  } else {
                    setdrawerBtn(doubleLeft.src)
                  }
                }}
                onClick={() => {
                  setfirst(prev => !prev)
                  // setdrawerBtn(doubleLeft.src)
                  if (!first) {
                    setdrawerBtn(doubleLeft.src)
                  } else {
                    setdrawerBtn(doubleRight.src)
                  }
                }}
              />
            </div>
          </div>
        </div>
      </CountyGraphPendingContext.Provider>
    </>
  )
}

export default WithNavProtected(AprV2)
